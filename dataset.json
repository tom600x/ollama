[
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nSELECT * FROM employees WHERE department_id = 10;\n```\n\nSimple select query filtering by department ID."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nvar query = from emp in employees where emp.DepartmentId == 10 select emp;\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nSELECT e.employee_id, d.department_name FROM employees e JOIN departments d ON e.department_id = d.department_id;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nvar query = from e in employees join d in departments on e.DepartmentId equals d.DepartmentId select new { e.EmployeeId, d.DepartmentName };\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nSELECT department_id, AVG(salary) FROM employees GROUP BY department_id;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nvar query = from emp in employees group emp by emp.DepartmentId into g select new { DepartmentId = g.Key, AverageSalary = g.Average(e => e.Salary) };\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nSELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nvar query = from emp in employees where emp.Salary > employees.Average(e => e.Salary) select emp;\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION get_employee_name(p_id IN employees.employee_id%TYPE) RETURN employees.first_name%TYPE IS\n v_name employees.first_name%TYPE;\nBEGIN\n SELECT first_name INTO v_name FROM employees WHERE employee_id = p_id;\n RETURN v_name;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string GetEmployeeName(int pId)\n{\n var employee = employees.FirstOrDefault(e => e.EmployeeId == pId);\n return employee != null ? employee.FirstName : null;\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n CURSOR c_employees IS SELECT * FROM employees WHERE department_id = 10;\n r_employee c_employees%ROWTYPE;\nBEGIN\n OPEN c_employees;\n LOOP\n FETCH c_employees INTO r_employee;\n EXIT WHEN c_employees%NOTFOUND;\n DBMS_OUTPUT.PUT_LINE(r_employee.first_name);\n END LOOP;\n CLOSE c_employees;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nforeach (var employee in employees.Where(e => e.DepartmentId == 10))\n{\n Console.WriteLine(employee.FirstName);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n v_emp employees%ROWTYPE;\nBEGIN\n SELECT * INTO v_emp FROM employees WHERE employee_id = 100;\n EXCEPTION\n WHEN NO_DATA_FOUND THEN\n DBMS_OUTPUT.PUT_LINE('Employee not found.');\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\ntry\n{\n var employee = employees.SingleOrDefault(e => e.EmployeeId == 100);\n if (employee == null)\n Console.WriteLine(\"Employee not found.\");\n}\ncatch (Exception ex)\n{\n // Handle exception\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nINSERT INTO employees (employee_id, first_name, last_name, department_id) VALUES (100, 'John', 'Doe', 10);\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\n// Assuming using Entity Framework or similar ORM\nvar newEmployee = new Employee { EmployeeId = 100, FirstName = \"John\", LastName = \"Doe\", DepartmentId = 10 };\ncontext.Employees.Add(newEmployee);\ncontext.SaveChanges();\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nUPDATE employees SET salary = salary * 1.1 WHERE department_id = 10;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\ncontext.Employees.Where(e => e.DepartmentId == 10).ToList().ForEach(e => e.Salary *= 1.1);\ncontext.SaveChanges();\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDELETE FROM employees WHERE employee_id = 100;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nvar employee = context.Employees.FirstOrDefault(e => e.EmployeeId == 100);\nif (employee != null)\n{\n context.Employees.Remove(employee);\n context.SaveChanges();\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION get_employee_count(p_dept_id IN NUMBER) RETURN NUMBER IS\n v_count NUMBER;\nBEGIN\n SELECT COUNT(*) INTO v_count FROM employees WHERE department_id = p_dept_id;\n RETURN v_count;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int GetEmployeeCount(int deptId)\n{\n return employees.Count(e => e.DepartmentId == deptId);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE get_employee_name(p_id IN employees.employee_id%TYPE, p_name OUT employees.first_name%TYPE) IS\nBEGIN\n SELECT first_name INTO p_name FROM employees WHERE employee_id = p_id;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string GetEmployeeName(int pId)\n{\n var employee = employees.FirstOrDefault(e => e.EmployeeId == pId);\n return employee?.FirstName;\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PACKAGE employee_pkg IS\n FUNCTION get_employee_name(p_id IN employees.employee_id%TYPE) RETURN employees.first_name%TYPE;\n PROCEDURE update_salary(p_id IN employees.employee_id%TYPE, p_salary IN employees.salary%TYPE);\nEND employee_pkg;\n\nPACKAGE BODY employee_pkg IS\n FUNCTION get_employee_name(p_id IN employees.employee_id%TYPE) RETURN employees.first_name%TYPE IS\n v_name employees.first_name%TYPE;\n BEGIN\n SELECT first_name INTO v_name FROM employees WHERE employee_id = p_id;\n RETURN v_name;\n END;\n\n PROCEDURE update_salary(p_id IN employees.employee_id%TYPE, p_salary IN employees.salary%TYPE) IS\n BEGIN\n UPDATE employees SET salary = p_salary WHERE employee_id = p_id;\n END;\nEND employee_pkg;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class EmployeePackage\n{\n public string GetEmployeeName(int pId)\n {\n var employee = employees.FirstOrDefault(e => e.EmployeeId == pId);\n return employee?.FirstName;\n }\n\n public void UpdateSalary(int pId, decimal pSalary)\n {\n var employee = employees.FirstOrDefault(e => e.EmployeeId == pId);\n if (employee != null)\n {\n employee.Salary = pSalary;\n context.SaveChanges();\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n v_counter NUMBER := 0;\nBEGIN\n LOOP\n v_counter := v_counter + 1;\n EXIT WHEN v_counter >= 10;\n DBMS_OUTPUT.PUT_LINE('Counter: ' || v_counter);\n END LOOP;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nfor (int counter = 0; counter < 10; counter++)\n{\n Console.WriteLine(\"Counter: \" + counter);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n v_emp employees%ROWTYPE;\nBEGIN\n SELECT * INTO v_emp FROM employees WHERE employee_id = 100;\n DBMS_OUTPUT.PUT_LINE('Employee found: ' || v_emp.first_name);\nEXCEPTION\n WHEN NO_DATA_FOUND THEN\n DBMS_OUTPUT.PUT_LINE('Employee not found.');\n WHEN TOO_MANY_ROWS THEN\n DBMS_OUTPUT.PUT_LINE('Multiple employees found.');\n WHEN OTHERS THEN\n DBMS_OUTPUT.PUT_LINE('An error occurred.');\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\ntry\n{\n var employee = employees.SingleOrDefault(e => e.EmployeeId == 100);\n if (employee != null)\n Console.WriteLine(\"Employee found: \" + employee.FirstName);\n else\n Console.WriteLine(\"Employee not found.\");\n}\ncatch (Exception ex)\n{\n Console.WriteLine(\"An error occurred.\");\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n CURSOR c_employees(p_dept_id IN departments.department_id%TYPE) IS\n SELECT * FROM employees WHERE department_id = p_dept_id;\n r_employee c_employees%ROWTYPE;\nBEGIN\n OPEN c_employees(10);\n LOOP\n FETCH c_employees INTO r_employee;\n EXIT WHEN c_employees%NOTFOUND;\n DBMS_OUTPUT.PUT_LINE(r_employee.first_name);\n END LOOP;\n CLOSE c_employees;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nforeach (var employee in employees.Where(e => e.DepartmentId == 10))\n{\n Console.WriteLine(employee.FirstName);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n CURSOR c_employees IS SELECT * FROM employees WHERE department_id = 10;\nBEGIN\n FOR r_employee IN c_employees LOOP\n DBMS_OUTPUT.PUT_LINE(r_employee.first_name);\n END LOOP;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nforeach (var employee in employees.Where(e => e.DepartmentId == 10))\n{\n Console.WriteLine(employee.FirstName);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n v_counter NUMBER := 0;\nBEGIN\n WHILE v_counter < 10 LOOP\n DBMS_OUTPUT.PUT_LINE('Counter: ' || v_counter);\n v_counter := v_counter + 1;\n END LOOP;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n Console.WriteLine(\"Counter: \" + counter);\n counter++;\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n v_salary NUMBER := 5000;\nBEGIN\n IF v_salary > 6000 THEN\n DBMS_OUTPUT.PUT_LINE('High salary.');\n ELSIF v_salary > 4000 THEN\n DBMS_OUTPUT.PUT_LINE('Average salary.');\n ELSE\n DBMS_OUTPUT.PUT_LINE('Low salary.');\n END IF;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nint salary = 5000;\nif (salary > 6000)\n{\n Console.WriteLine(\"High salary.\");\n}\nelse if (salary > 4000)\n{\n Console.WriteLine(\"Average salary.\");\n}\nelse\n{\n Console.WriteLine(\"Low salary.\");\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE\n v_grade CHAR(1) := 'B';\nBEGIN\n CASE v_grade\n WHEN 'A' THEN DBMS_OUTPUT.PUT_LINE('Excellent');\n WHEN 'B' THEN DBMS_OUTPUT.PUT_LINE('Good');\n WHEN 'C' THEN DBMS_OUTPUT.PUT_LINE('Average');\n ELSE DBMS_OUTPUT.PUT_LINE('Needs improvement');\n END CASE;\nEND;\n```\n\n"
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nchar grade = 'B';\nswitch (grade)\n{\n case 'A':\n Console.WriteLine(\"Excellent\");\n break;\n case 'B':\n Console.WriteLine(\"Good\");\n break;\n case 'C':\n Console.WriteLine(\"Average\");\n break;\n default:\n Console.WriteLine(\"Needs improvement\");\n break;\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE update_salary(p_id IN employees.employee_id%TYPE, p_salary IN employees.salary%TYPE) IS BEGIN UPDATE employees SET salary = p_salary WHERE employee_id = p_id; COMMIT; EXCEPTION WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Employee not found.'); WHEN TOO_MANY_ROWS THEN DBMS_OUTPUT.PUT_LINE('Multiple employees found.'); END;\n```\n\nProcedure to update employee salary with error handling."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void UpdateSalary(int pId, decimal pSalary)\n{\n try\n {\n var employee = context.Employees.FirstOrDefault(e => e.EmployeeId == pId);\n if (employee != null)\n {\n employee.Salary = pSalary;\n context.SaveChanges();\n }\n }\n catch (InvalidOperationException ex)\n {\n Console.WriteLine(\"Employee not found.\");\n }\n catch (DbUpdateException ex)\n {\n Console.WriteLine(\"Multiple employees found.\");\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION get_employee_count(p_dept_id IN departments.department_id%TYPE) RETURN NUMBER IS v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM employees WHERE department_id = p_dept_id; RETURN v_count; END;\n```\n\nFunction to count employees in a department using LINQ."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int GetEmployeeCount(int deptId)\n{\n return context.Employees.Count(e => e.DepartmentId == deptId);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PACKAGE employee_pkg IS PROCEDURE add_employee(p_id IN employees.employee_id%TYPE, p_name IN employees.first_name%TYPE, p_dept IN employees.department_id%TYPE); FUNCTION get_employee_name(p_id IN employees.employee_id%TYPE) RETURN employees.first_name%TYPE; END employee_pkg;\n\nCREATE OR REPLACE PACKAGE BODY employee_pkg IS PROCEDURE add_employee(p_id IN employees.employee_id%TYPE, p_name IN employees.first_name%TYPE, p_dept IN employees.department_id%TYPE) IS BEGIN INSERT INTO employees (employee_id, first_name, department_id) VALUES (p_id, p_name, p_dept); COMMIT; END;\n\nFUNCTION get_employee_name(p_id IN employees.employee_id%TYPE) RETURN employees.first_name%TYPE IS v_name employees.first_name%TYPE; BEGIN SELECT first_name INTO v_name FROM employees WHERE employee_id = p_id; RETURN v_name; END; END employee_pkg;\n```\n\nPackage containing a procedure and function for employee operations."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class EmployeePackage\n{\n public void AddEmployee(int pId, string pName, int pDept)\n {\n var newEmployee = new Employee { EmployeeId = pId, FirstName = pName, DepartmentId = pDept };\n context.Employees.Add(newEmployee);\n context.SaveChanges();\n }\n\n public string GetEmployeeName(int pId)\n {\n return context.Employees.FirstOrDefault(e => e.EmployeeId == pId)?.FirstName;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE v_counter NUMBER := 0; BEGIN LOOP v_counter := v_counter + 1; EXIT WHEN v_counter >= 10; DBMS_OUTPUT.PUT_LINE('Counter: ' || v_counter); END LOOP; END;\n```\n\nPL/SQL loop converted to a C# for loop."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nfor (int counter = 0; counter < 10; counter++)\n{\n Console.WriteLine(\"Counter: \" + counter);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE v_emp employees%ROWTYPE; BEGIN SELECT * INTO v_emp FROM employees WHERE employee_id = 100; DBMS_OUTPUT.PUT_LINE('Employee found: ' || v_emp.first_name); EXCEPTION WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Employee not found.'); WHEN TOO_MANY_ROWS THEN DBMS_OUTPUT.PUT_LINE('Multiple employees found.'); WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('An error occurred.'); END;\n```\n\nException handling in PL/SQL converted to C# try-catch block."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\ntry\n{\n var employee = context.Employees.SingleOrDefault(e => e.EmployeeId == 100);\n if (employee != null)\n Console.WriteLine(\"Employee found: \" + employee.FirstName);\n else\n Console.WriteLine(\"Employee not found.\");\n}\ncatch (Exception ex)\n{\n Console.WriteLine(\"An error occurred.\");\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE CURSOR c_employees(p_dept_id IN departments.department_id%TYPE) IS SELECT * FROM employees WHERE department_id = p_dept_id; r_employee c_employees%ROWTYPE; BEGIN OPEN c_employees(10); LOOP FETCH c_employees INTO r_employee; EXIT WHEN c_employees%NOTFOUND; DBMS_OUTPUT.PUT_LINE(r_employee.first_name); END LOOP; CLOSE c_employees; END;\n```\n\nCursor-based loop converted to LINQ query."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nforeach (var employee in context.Employees.Where(e => e.DepartmentId == 10))\n{\n Console.WriteLine(employee.FirstName);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE CURSOR c_employees IS SELECT * FROM employees WHERE department_id = 10; BEGIN FOR r_employee IN c_employees LOOP DBMS_OUTPUT.PUT_LINE(r_employee.first_name); END LOOP; END;\n```\n\nFOR loop over cursor converted to LINQ foreach loop."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nforeach (var employee in context.Employees.Where(e => e.DepartmentId == 10))\n{\n Console.WriteLine(employee.FirstName);\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE v_salary NUMBER := 5000; BEGIN IF v_salary > 6000 THEN DBMS_OUTPUT.PUT_LINE('High salary.'); ELSIF v_salary > 4000 THEN DBMS_OUTPUT.PUT_LINE('Average salary.'); ELSE DBMS_OUTPUT.PUT_LINE('Low salary.'); END IF; END;\n```\n\nPL/SQL IF-THEN-ELSIF converted to C# if-else if-else."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nint salary = 5000;\nif (salary > 6000)\n{\n Console.WriteLine(\"High salary.\");\n}\nelse if (salary > 4000)\n{\n Console.WriteLine(\"Average salary.\");\n}\nelse\n{\n Console.WriteLine(\"Low salary.\");\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nDECLARE v_grade CHAR(1) := 'B'; BEGIN CASE v_grade WHEN 'A' THEN DBMS_OUTPUT.PUT_LINE('Excellent'); WHEN 'B' THEN DBMS_OUTPUT.PUT_LINE('Good'); WHEN 'C' THEN DBMS_OUTPUT.PUT_LINE('Average'); ELSE DBMS_OUTPUT.PUT_LINE('Needs improvement'); END CASE; END;\n```\n\nPL/SQL CASE statement converted to C# switch-case."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nchar grade = 'B';\nswitch (grade)\n{\n case 'A':\n Console.WriteLine(\"Excellent\");\n break;\n case 'B':\n Console.WriteLine(\"Good\");\n break;\n case 'C':\n Console.WriteLine(\"Average\");\n break;\n default:\n Console.WriteLine(\"Needs improvement\");\n break;\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE transfer_funds(p_from_acct IN accounts.account_id%TYPE, p_to_acct IN accounts.account_id%TYPE, p_amount IN accounts.balance%TYPE) IS BEGIN UPDATE accounts SET balance = balance - p_amount WHERE account_id = p_from_acct; UPDATE accounts SET balance = balance + p_amount WHERE account_id = p_to_acct; COMMIT; EXCEPTION WHEN others THEN ROLLBACK; DBMS_OUTPUT.PUT_LINE('Transfer failed.'); END;\n```\n\nProcedure with transaction management using C# transactions."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\nusing (var transaction = context.Database.BeginTransaction())\n{\n try\n {\n var fromAccount = context.Accounts.FirstOrDefault(a => a.AccountId == pFromAcct);\n var toAccount = context.Accounts.FirstOrDefault(a => a.AccountId == pToAcct);\n if (fromAccount != null && toAccount != null)\n {\n fromAccount.Balance -= pAmount;\n toAccount.Balance += pAmount;\n context.SaveChanges();\n transaction.Commit();\n }\n else\n {\n transaction.Rollback();\n Console.WriteLine(\"Accounts not found.\");\n }\n }\n catch (Exception ex)\n {\n transaction.Rollback();\n Console.WriteLine(\"Transfer failed.\");\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE update_salary(p_id IN employees.employee_id%TYPE, p_salary IN employees.salary%TYPE) IS BEGIN UPDATE employees SET salary = p_salary WHERE employee_id = p_id; COMMIT; EXCEPTION WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Employee not found.'); END;\n```\n\nProcedure to update employee salary with error handling."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void UpdateSalary(int pId, decimal pSalary)\n{\n try\n {\n using (var context = new EmployeeContext())\n {\n var employee = context.Employees.FirstOrDefault(e => e.EmployeeId == pId);\n if (employee != null)\n {\n employee.Salary = pSalary;\n context.SaveChanges();\n }\n else\n {\n throw new Exception(\"Employee not found.\");\n }\n }\n }\n catch (Exception ex)\n {\n Console.WriteLine(ex.Message);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE process_orders IS CURSOR c_orders IS SELECT * FROM orders WHERE status = 'Pending'; BEGIN FOR ord IN c_orders LOOP UPDATE order_items SET quantity = quantity + 10 WHERE order_id = ord.order_id; END LOOP; COMMIT; EXCEPTION WHEN others THEN ROLLBACK; END;\n```\n\nProcedure to update order items within a transaction."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void ProcessOrders()\n{\n try\n {\n using (var context = new OrderContext())\n {\n var pendingOrders = context.Orders.Where(o => o.Status == \"Pending\").ToList();\n foreach (var ord in pendingOrders)\n {\n var orderItems = context.OrderItems.Where(oi => oi.OrderId == ord.OrderId);\n foreach (var item in orderItems)\n {\n item.Quantity += 10;\n }\n }\n context.SaveChanges();\n }\n }\n catch (Exception ex)\n {\n Console.WriteLine(ex.Message);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE conditional_update(p_id IN employees.employee_id%TYPE, p_new_salary IN employees.salary%TYPE) IS BEGIN IF p_new_salary > 5000 THEN UPDATE employees SET salary = p_new_salary WHERE employee_id = p_id; ELSE DBMS_OUTPUT.PUT_LINE('Salary too low.'); END IF; COMMIT; END;\n```\n\nProcedure with conditional update."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void ConditionalUpdate(int pId, decimal pNewSalary)\n{\n using (var context = new EmployeeContext())\n {\n var employee = context.Employees.FirstOrDefault(e => e.EmployeeId == pId);\n if (employee != null)\n {\n if (pNewSalary > 5000)\n {\n employee.Salary = pNewSalary;\n context.SaveChanges();\n }\n else\n {\n Console.WriteLine(\"Salary too low.\");\n }\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE loop_through_employees IS CURSOR c_employees IS SELECT * FROM employees; BEGIN FOR emp IN c_employees LOOP DBMS_OUTPUT.PUT_LINE(emp.first_name || ' ' || emp.last_name); END LOOP; END;\n```\n\nProcedure looping through employees."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void LoopThroughEmployees()\n{\n using (var context = new EmployeeContext())\n {\n var employees = context.Employees.AsEnumerable();\n foreach (var emp in employees)\n {\n Console.WriteLine(\"{emp.FirstName} {emp.LastName}\");\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE transaction_example IS BEGIN INSERT INTO logs VALUES (1, 'Start'); INSERT INTO logs VALUES (2, 'End'); COMMIT; EXCEPTION WHEN others THEN ROLLBACK; END;\n```\n\nProcedure demonstrating transactions."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void TransactionExample()\n{\n using (var context = new LogContext())\n {\n using (var transaction = context.Database.BeginTransaction())\n {\n try\n {\n context.Logs.Add(new Log { LogId = 1, Message = \"Start\" });\n context.Logs.Add(new Log { LogId = 2, Message = \"End\" });\n context.SaveChanges();\n transaction.Commit();\n }\n catch (Exception ex)\n {\n transaction.Rollback();\n Console.WriteLine(ex.Message);\n }\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE case_handler(p_status IN VARCHAR2) IS BEGIN CASE p_status WHEN 'Active' THEN DBMS_OUTPUT.PUT_LINE('User is active.'); WHEN 'Inactive' THEN DBMS_OUTPUT.PUT_LINE('User is inactive.'); ELSE DBMS_OUTPUT.PUT_LINE('Unknown status.'); END CASE; END;\n```\n\nProcedure using CASE statement."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void CaseHandler(string pStatus)\n{\n switch (pStatus)\n {\n case \"Active\":\n Console.WriteLine(\"User is active.\");\n break;\n case \"Inactive\":\n Console.WriteLine(\"User is inactive.\");\n break;\n default:\n Console.WriteLine(\"Unknown status.\");\n break;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE nested_loops IS CURSOR c_departments IS SELECT * FROM departments; CURSOR c_employees(d_id departments.department_id%TYPE) IS SELECT * FROM employees WHERE department_id = d_id; BEGIN FOR dept IN c_departments LOOP FOR emp IN c_employees(dept.department_id) LOOP DBMS_OUTPUT.PUT_LINE(emp.first_name); END LOOP; END LOOP; END;\n```\n\nProcedure with nested loops."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void NestedLoops()\n{\n using (var context = new EmployeeContext())\n {\n var departments = context.Departments.AsEnumerable();\n foreach (var dept in departments)\n {\n var employees = context.Employees.Where(e => e.DepartmentId == dept.DepartmentId).AsEnumerable();\n foreach (var emp in employees)\n {\n Console.WriteLine(emp.FirstName);\n }\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE exception_handling IS BEGIN DBMS_OUTPUT.PUT_LINE('Starting procedure.'); RAISE_APPLICATION_ERROR(-20001, 'An error occurred.'); EXCEPTION WHEN others THEN DBMS_OUTPUT.PUT_LINE('Error handled.'); END;\n```\n\nProcedure demonstrating exception handling."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void ExceptionHandling()\n{\n try\n {\n Console.WriteLine(\"Starting procedure.\");\n throw new Exception(\"An error occurred.\");\n }\n catch (Exception ex)\n {\n Console.WriteLine(\"Error handled.\");\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE bulk_operations IS TYPE emp_table IS TABLE OF employees%ROWTYPE; emp_list emp_table; BEGIN SELECT * BULK COLLECT INTO emp_list FROM employees WHERE salary > 5000; FOR i IN emp_list.FIRST..emp_list.LAST LOOP DBMS_OUTPUT.PUT_LINE(emp_list(i).first_name); END LOOP; END;\n```\n\nProcedure using bulk operations."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void BulkOperations()\n{\n using (var context = new EmployeeContext())\n {\n var employees = context.Employees.Where(e => e.Salary > 5000).ToList();\n foreach (var emp in employees)\n {\n Console.WriteLine(emp.FirstName);\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE complex_control_flow IS BEGIN FOR i IN 1..10 LOOP IF i MOD 2 = 0 THEN DBMS_OUTPUT.PUT_LINE(i || ' is even.'); ELSE DBMS_OUTPUT.PUT_LINE(i || ' is odd.'); END IF; END LOOP; END;\n```\n\nProcedure with complex control flow."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void ComplexControlFlow()\n{\n for (int i = 1; i <= 10; i++)\n {\n if (i % 2 == 0)\n {\n Console.WriteLine($\"{i} is even.\");\n }\n else\n {\n Console.WriteLine($\"{i} is odd.\");\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE nested_conditionals IS BEGIN IF EXISTS (SELECT 1 FROM employees WHERE salary > 10000) THEN IF EXISTS (SELECT 1 FROM departments WHERE location = 'New York') THEN DBMS_OUTPUT.PUT_LINE('Conditions met.'); ELSE DBMS_OUTPUT.PUT_LINE('New York condition not met.'); END IF; ELSE DBMS_OUTPUT.PUT_LINE('Salary condition not met.'); END IF; END;\n```\n\nProcedure with nested conditionals."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void NestedConditionals()\n{\n using (var context = new EmployeeContext())\n {\n if (context.Employees.Any(e => e.Salary > 10000))\n {\n if (context.Departments.Any(d => d.Location == \"New York\"))\n {\n Console.WriteLine(\"Conditions met.\");\n }\n else\n {\n Console.WriteLine(\"New York condition not met.\");\n }\n }\n else\n {\n Console.WriteLine(\"Salary condition not met.\");\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE transaction_with_rollback IS BEGIN DELETE FROM employees WHERE department_id = 10; IF SQL%ROWCOUNT > 5 THEN ROLLBACK; ELSE COMMIT; END IF; END;\n```\n\nProcedure with transaction and rollback based on condition."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void TransactionWithRollback()\n{\n using (var context = new EmployeeContext())\n {\n using (var transaction = context.Database.BeginTransaction())\n {\n try\n {\n var employees = context.Employees.Where(e => e.DepartmentId == 10).ToList();\n context.Employees.RemoveRange(employees);\n context.SaveChanges();\n if (employees.Count > 5)\n {\n transaction.Rollback();\n }\n else\n {\n transaction.Commit();\n }\n }\n catch (Exception ex)\n {\n transaction.Rollback();\n Console.WriteLine(ex.Message);\n }\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE loop_with_exit IS CURSOR c_employees IS SELECT * FROM employees; BEGIN FOR emp IN c_employees LOOP IF emp.salary > 10000 THEN EXIT; END IF; DBMS_OUTPUT.PUT_LINE(emp.first_name); END LOOP; END;\n```\n\nProcedure with loop and exit condition."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void LoopWithExit()\n{\n using (var context = new EmployeeContext())\n {\n var employees = context.Employees.AsEnumerable();\n foreach (var emp in employees)\n {\n if (emp.Salary > 10000)\n {\n break;\n }\n Console.WriteLine(emp.FirstName);\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_sql_example IS BEGIN EXECUTE IMMEDIATE 'CREATE TABLE temp_table (id NUMBER)'; END;\n```\n\nProcedure using dynamic SQL."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void DynamicSqlExample()\n{\n using (var context = new DatabaseContext())\n {\n context.Database.ExecuteSqlRaw(\"CREATE TABLE temp_table (id INT)\");\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE procedure_calling_another IS BEGIN BEGIN_PROCESS(); END;\n```\n\nProcedure calling another procedure."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void ProcedureCallingAnother()\n{\n AnotherProcedure();\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE handle_multiple_exceptions IS BEGIN RAISE_APPLICATION_ERROR(-20001, 'Error one.'); EXCEPTION WHEN others THEN IF SQLCODE = -20001 THEN DBMS_OUTPUT.PUT_LINE('Error one handled.'); ELSE DBMS_OUTPUT.PUT_LINE('Other error handled.'); END IF; END;\n```\n\nProcedure handling multiple exceptions."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void HandleMultipleExceptions()\n{\n try\n {\n throw new Exception(\"Error one.\");\n }\n catch (Exception ex)\n {\n if (ex.Message.Contains(\"Error one.\"))\n {\n Console.WriteLine(\"Error one handled.\");\n }\n else\n {\n Console.WriteLine(\"Other error handled.\");\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE complex_transaction IS BEGIN INSERT INTO table1 VALUES (1, 'Value1'); INSERT INTO table2 VALUES (1, 'Value2'); IF SQL%ROWCOUNT > 0 THEN COMMIT; ELSE ROLLBACK; END IF; END;\n```\n\nProcedure with complex transaction logic."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void ComplexTransaction()\n{\n using (var context = new DatabaseContext())\n {\n using (var transaction = context.Database.BeginTransaction())\n {\n try\n {\n context.Table1.Add(new Table1 { Id = 1, Value = \"Value1\" });\n context.Table2.Add(new Table2 { Id = 1, Value = \"Value2\" });\n context.SaveChanges();\n transaction.Commit();\n }\n catch (Exception ex)\n {\n transaction.Rollback();\n Console.WriteLine(ex.Message);\n }\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE loop_with_continue IS CURSOR c_employees IS SELECT * FROM employees; BEGIN FOR emp IN c_employees LOOP IF emp.salary < 5000 THEN CONTINUE; END IF; DBMS_OUTPUT.PUT_LINE(emp.first_name); END LOOP; END;\n```\n\nProcedure with loop and continue statement."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void LoopWithContinue()\n{\n using (var context = new EmployeeContext())\n {\n var employees = context.Employees.AsEnumerable();\n foreach (var emp in employees)\n {\n if (emp.Salary < 5000)\n {\n continue;\n }\n Console.WriteLine(emp.FirstName);\n }\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE nested_transactions IS BEGIN SAVEPOINT sp1; INSERT INTO table1 VALUES (1, 'Value1'); SAVEPOINT sp2; INSERT INTO table2 VALUES (1, 'Value2'); ROLLBACK TO sp1; COMMIT; END;\n```\n\nProcedure with nested transactions."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void NestedTransactions()\n{\n using (var context = new DatabaseContext())\n {\n context.Database.ExecuteSqlRaw(\"SAVEPOINT sp1\");\n context.Table1.Add(new Table1 { Id = 1, Value = \"Value1\" });\n context.SaveChanges();\n context.Database.ExecuteSqlRaw(\"SAVEPOINT sp2\");\n context.Table2.Add(new Table2 { Id = 1, Value = \"Value2\" });\n context.SaveChanges();\n context.Database.ExecuteSqlRaw(\"ROLLBACK TO SAVEPOINT sp1\");\n context.Database.ExecuteSqlRaw(\"COMMIT\");\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE conditional_insert IS BEGIN IF EXISTS (SELECT 1 FROM departments WHERE location = 'Remote') THEN INSERT INTO employees (employee_id, first_name, department_id) VALUES (100, 'John', 10); ELSE INSERT INTO employees (employee_id, first_name, department_id) VALUES (101, 'Jane', 20); END IF; COMMIT; END;\n```\n\nProcedure with conditional insert."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void ConditionalInsert()\n{\n using (var context = new EmployeeContext())\n {\n if (context.Departments.Any(d => d.Location == \"Remote\"))\n {\n context.Employees.Add(new Employee { EmployeeId = 100, FirstName = \"John\", DepartmentId = 10 });\n }\n else\n {\n context.Employees.Add(new Employee { EmployeeId = 101, FirstName = \"Jane\", DepartmentId = 20 });\n }\n context.SaveChanges();\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION avg_salary(p_dept_id IN employees.department_id%TYPE) RETURN NUMBER IS\n v_avg NUMBER;\nBEGIN\n SELECT AVG(salary) INTO v_avg FROM employees WHERE department_id = p_dept_id;\n IF SQL%NOTFOUND THEN\n RAISE_APPLICATION_ERROR(-20001, 'No employees in department.');\n END IF;\n RETURN v_avg;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20002, 'An error occurred.');\nEND;\n```\n\nFunction to calculate average salary with error handling."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal AvgSalary(int pDeptId)\n{\n try\n {\n var avg = context.Employees\n .Where(e => e.DepartmentId == pDeptId)\n .Average(e => e.Salary);\n if (avg == null)\n {\n throw new Exception(\"No employees in department.\");\n }\n return (decimal)avg;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION increase_salary(p_dept_id IN employees.department_id%TYPE, p_percent IN NUMBER) RETURN NUMBER IS\nBEGIN\n UPDATE employees SET salary = salary * (1 + p_percent/100) WHERE department_id = p_dept_id;\n IF SQL%ROWCOUNT = 0 THEN\n RAISE_APPLICATION_ERROR(-20003, 'No employees updated.');\n END IF;\n COMMIT;\n RETURN SQL%ROWCOUNT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20004, 'An error occurred.');\nEND;\n```\n\nFunction to increase employee salaries with transaction management."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int IncreaseSalary(int pDeptId, decimal pPercent)\n{\n try\n {\n var employeesToUpdate = context.Employees\n .Where(e => e.DepartmentId == pDeptId)\n .ToList();\n if (employeesToUpdate.Count == 0)\n {\n throw new Exception(\"No employees updated.\");\n }\n foreach (var emp in employeesToUpdate)\n {\n emp.Salary *= (1 + pPercent / 100m);\n }\n context.SaveChanges();\n return employeesToUpdate.Count;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION employee_count(p_dept_id IN employees.department_id%TYPE) RETURN NUMBER IS\n v_count NUMBER;\nBEGIN\n SELECT COUNT(*) INTO v_count FROM employees WHERE department_id = p_dept_id;\n RETURN v_count;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20005, 'An error occurred.');\nEND;\n```\n\nFunction to count employees in a department."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int EmployeeCount(int pDeptId)\n{\n try\n {\n return context.Employees.Count(e => e.DepartmentId == pDeptId);\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION get_employee_names(p_dept_id IN employees.department_id%TYPE) RETURN SYS_REFCURSOR IS\n cur SYS_REFCURSOR;\nBEGIN\n OPEN cur FOR SELECT first_name, last_name FROM employees WHERE department_id = p_dept_id;\n RETURN cur;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20006, 'An error occurred.');\nEND;\n```\n\nFunction to retrieve employee names."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic IEnumerable<EmployeeName> GetEmployeeNames(int pDeptId)\n{\n try\n {\n return context.Employees\n .Where(e => e.DepartmentId == pDeptId)\n .Select(e => new EmployeeName { FirstName = e.FirstName, LastName = e.LastName })\n .ToList();\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_bonus(p_emp_id IN employees.employee_id%TYPE) RETURN NUMBER IS\n v_salary employees.salary%TYPE;\nBEGIN\n SELECT salary INTO v_salary FROM employees WHERE employee_id = p_emp_id;\n IF v_salary > 5000 THEN\n RETURN v_salary * 0.1;\n ELSE\n RETURN v_salary * 0.05;\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20007, 'An error occurred.');\nEND;\n```\n\nFunction to calculate employee bonus with conditional logic."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal CalculateBonus(int pEmpId)\n{\n try\n {\n var employee = context.Employees.FirstOrDefault(e => e.EmployeeId == pEmpId);\n if (employee == null)\n {\n throw new Exception(\"Employee not found.\");\n }\n if (employee.Salary > 5000m)\n {\n return employee.Salary * 0.1m;\n }\n else\n {\n return employee.Salary * 0.05m;\n }\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION process_orders(p_order_id IN orders.order_id%TYPE) RETURN NUMBER IS\nBEGIN\n UPDATE order_items SET quantity = quantity + 10 WHERE order_id = p_order_id;\n COMMIT;\n RETURN SQL%ROWCOUNT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20008, 'An error occurred.');\nEND;\n```\n\nFunction to update order items with transaction management."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int ProcessOrders(int pOrderId)\n{\n try\n {\n var orderItems = context.OrderItems.Where(oi => oi.OrderId == pOrderId).ToList();\n foreach (var item in orderItems)\n {\n item.Quantity += 10;\n }\n context.SaveChanges();\n return orderItems.Count;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION check_stock(p_product_id IN products.product_id%TYPE) RETURN VARCHAR2 IS\n v_stock products.stock%TYPE;\nBEGIN\n SELECT stock INTO v_stock FROM products WHERE product_id = p_product_id;\n IF v_stock < 10 THEN\n RETURN 'Low Stock';\n ELSE\n RETURN 'Stock OK';\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20009, 'An error occurred.');\nEND;\n```\n\nFunction to check product stock levels."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string CheckStock(int pProductId)\n{\n try\n {\n var product = context.Products.FirstOrDefault(p => p.ProductId == pProductId);\n if (product == null)\n {\n throw new Exception(\"Product not found.\");\n }\n if (product.Stock < 10)\n {\n return \"Low Stock\";\n }\n else\n {\n return \"Stock OK\";\n }\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION generate_report(p_dept_id IN departments.department_id%TYPE) RETURN CLOB IS\n v_report CLOB;\nBEGIN\n SELECT LISTAGG(first_name || ' ' || last_name, ', ') WITHIN GROUP (ORDER BY last_name) INTO v_report FROM employees WHERE department_id = p_dept_id;\n RETURN v_report;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20010, 'An error occurred.');\nEND;\n```\n\nFunction to generate a report of employee names."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string GenerateReport(int pDeptId)\n{\n try\n {\n var report = string.Join(\", \", context.Employees\n .Where(e => e.DepartmentId == pDeptId)\n .OrderBy(e => e.LastName)\n .Select(e => e.FirstName + \" \" + e.LastName)\n .ToList());\n return report;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION validate_input(p_input IN VARCHAR2) RETURN BOOLEAN IS\nBEGIN\n IF p_input IS NULL THEN\n RAISE_APPLICATION_ERROR(-20011, 'Input cannot be null.');\n END IF;\n IF LENGTH(p_input) < 5 THEN\n RAISE_APPLICATION_ERROR(-20012, 'Input too short.');\n END IF;\n RETURN TRUE;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20013, 'An error occurred.');\nEND;\n```\n\nFunction to validate input parameters."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool ValidateInput(string pInput)\n{\n try\n {\n if (string.IsNullOrEmpty(pInput))\n {\n throw new Exception(\"Input cannot be null.\");\n }\n if (pInput.Length < 5)\n {\n throw new Exception(\"Input too short.\");\n }\n return true;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_total(p_order_id IN orders.order_id%TYPE) RETURN NUMBER IS\n v_total NUMBER;\nBEGIN\n SELECT SUM(quantity * unit_price) INTO v_total FROM order_items WHERE order_id = p_order_id;\n RETURN v_total;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20014, 'An error occurred.');\nEND;\n```\n\nFunction to calculate total order value."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal CalculateTotal(int pOrderId)\n{\n try\n {\n var total = context.OrderItems\n .Where(oi => oi.OrderId == pOrderId)\n .Sum(oi => oi.Quantity * oi.UnitPrice);\n return total ?? 0m;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION assign_tasks(p_employee_id IN employees.employee_id%TYPE) RETURN NUMBER IS\nBEGIN\n INSERT INTO tasks (employee_id, task_description) VALUES (p_employee_id, 'New Task');\n COMMIT;\n RETURN SQL%ROWCOUNT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20015, 'An error occurred.');\nEND;\n```\n\nFunction to assign tasks to an employee."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int AssignTasks(int pEmployeeId)\n{\n try\n {\n var newTask = new Task { EmployeeId = pEmployeeId, TaskDescription = \"New Task\" };\n context.Tasks.Add(newTask);\n context.SaveChanges();\n return 1;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION approve_request(p_request_id IN requests.request_id%TYPE) RETURN BOOLEAN IS\nBEGIN\n UPDATE requests SET status = 'Approved' WHERE request_id = p_request_id;\n IF SQL%ROWCOUNT = 0 THEN\n RAISE_APPLICATION_ERROR(-20016, 'Request not found.');\n END IF;\n COMMIT;\n RETURN TRUE;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20017, 'An error occurred.');\nEND;\n```\n\nFunction to approve a request."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool ApproveRequest(int pRequestId)\n{\n try\n {\n var request = context.Requests.FirstOrDefault(r => r.RequestId == pRequestId);\n if (request == null)\n {\n throw new Exception(\"Request not found.\");\n }\n request.Status = \"Approved\";\n context.SaveChanges();\n return true;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_age(p_dob IN employees.date_of_birth%TYPE) RETURN NUMBER IS\n v_age NUMBER;\nBEGIN\n SELECT FLOOR(MONTHS_BETWEEN(SYSDATE, p_dob)/12) INTO v_age FROM dual;\n RETURN v_age;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20018, 'An error occurred.');\nEND;\n```\n\nFunction to calculate employee age."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int CalculateAge(DateTime pDob)\n{\n try\n {\n var age = DateTime.Today.Year - pDob.Year;\n if (pDob.AddYears(age) > DateTime.Today)\n {\n age--;\n }\n return age;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION generate_invoice(p_order_id IN orders.order_id%TYPE) RETURN CLOB IS\n v_invoice CLOB;\nBEGIN\n SELECT 'Invoice for Order ' || p_order_id || ' - Total: ' || TO_CHAR(calculate_total(p_order_id), '$999999.99') INTO v_invoice FROM dual;\n RETURN v_invoice;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20019, 'An error occurred.');\nEND;\n```\n\nFunction to generate an invoice."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string GenerateInvoice(int pOrderId)\n{\n try\n {\n var total = CalculateTotal(pOrderId);\n var invoice = \"Invoice for Order \" + pOrderId.ToString() + \" - Total: \" + total.ToString(\"C\");\n return invoice;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION check_credentials(p_username IN users.username%TYPE, p_password IN users.password%TYPE) RETURN BOOLEAN IS\nBEGIN\n IF EXISTS (SELECT 1 FROM users WHERE username = p_username AND password = p_password) THEN\n RETURN TRUE;\n ELSE\n RETURN FALSE;\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20020, 'An error occurred.');\nEND;\n```\n\nFunction to check user credentials."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool CheckCredentials(string pUsername, string pPassword)\n{\n try\n {\n return context.Users.Any(u => u.Username == pUsername && u.Password == pPassword);\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION update_status(p_order_id IN orders.order_id%TYPE, p_new_status IN orders.status%TYPE) RETURN BOOLEAN IS\nBEGIN\n UPDATE orders SET status = p_new_status WHERE order_id = p_order_id;\n IF SQL%ROWCOUNT = 0 THEN\n RAISE_APPLICATION_ERROR(-20021, 'Order not found.');\n END IF;\n COMMIT;\n RETURN TRUE;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20022, 'An error occurred.');\nEND;\n```\n\nFunction to update order status."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool UpdateStatus(int pOrderId, string pNewStatus)\n{\n try\n {\n var order = context.Orders.FirstOrDefault(o => o.OrderId == pOrderId);\n if (order == null)\n {\n throw new Exception(\"Order not found.\");\n }\n order.Status = pNewStatus;\n context.SaveChanges();\n return true;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_discount(p_amount IN NUMBER) RETURN NUMBER IS\nBEGIN\n IF p_amount > 1000 THEN\n RETURN p_amount * 0.1;\n ELSIF p_amount > 500 THEN\n RETURN p_amount * 0.05;\n ELSE\n RETURN 0;\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20023, 'An error occurred.');\nEND;\n```\n\nFunction to calculate discount based on amount."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal CalculateDiscount(decimal pAmount)\n{\n try\n {\n if (pAmount > 1000m)\n {\n return pAmount * 0.1m;\n }\n else if (pAmount > 500m)\n {\n return pAmount * 0.05m;\n }\n else\n {\n return 0m;\n }\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION get_product_details(p_product_id IN products.product_id%TYPE) RETURN SYS_REFCURSOR IS\n cur SYS_REFCURSOR;\nBEGIN\n OPEN cur FOR SELECT product_name, description, price FROM products WHERE product_id = p_product_id;\n RETURN cur;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20024, 'An error occurred.');\nEND;\n```\n\nFunction to retrieve product details."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic IEnumerable<ProductDetail> GetProductDetails(int pProductId)\n{\n try\n {\n return context.Products\n .Where(p => p.ProductId == pProductId)\n .Select(p => new ProductDetail { Name = p.ProductName, Description = p.Description, Price = p.Price })\n .ToList();\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_tax(p_amount IN NUMBER) RETURN NUMBER IS\nBEGIN\n RETURN p_amount * 0.08;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20025, 'An error occurred.');\nEND;\n```\n\nFunction to calculate tax on an amount."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal CalculateTax(decimal pAmount)\n{\n try\n {\n return pAmount * 0.08m;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION validate_order(p_order_id IN orders.order_id%TYPE) RETURN BOOLEAN IS\nBEGIN\n IF EXISTS (SELECT 1 FROM orders WHERE order_id = p_order_id AND status = 'Pending') THEN\n RETURN TRUE;\n ELSE\n RETURN FALSE;\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20026, 'An error occurred.');\nEND;\n```\n\nFunction to validate an order status."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool ValidateOrder(int pOrderId)\n{\n try\n {\n return context.Orders.Any(o => o.OrderId == pOrderId && o.Status == \"Pending\");\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION avg_salary(p_dept_id IN employees.department_id%TYPE) RETURN NUMBER IS\n v_avg NUMBER;\nBEGIN\n SELECT AVG(salary) INTO v_avg FROM employees WHERE department_id = p_dept_id;\n IF SQL%NOTFOUND THEN\n RAISE_APPLICATION_ERROR(-20001, 'No employees in department.');\n END IF;\n RETURN v_avg;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20002, 'An error occurred.');\nEND;\n```\n\nFunction to calculate average salary with error handling."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal AvgSalary(int pDeptId)\n{\n try\n {\n var avg = context.Employees\n .Where(e => e.DepartmentId == pDeptId)\n .Average(e => e.Salary);\n if (avg == null)\n {\n throw new Exception(\"No employees in department.\");\n }\n return (decimal)avg;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION increase_salary(p_dept_id IN employees.department_id%TYPE, p_percent IN NUMBER) RETURN NUMBER IS\nBEGIN\n UPDATE employees SET salary = salary * (1 + p_percent/100) WHERE department_id = p_dept_id;\n IF SQL%ROWCOUNT = 0 THEN\n RAISE_APPLICATION_ERROR(-20003, 'No employees updated.');\n END IF;\n COMMIT;\n RETURN SQL%ROWCOUNT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20004, 'An error occurred.');\nEND;\n```\n\nFunction to increase employee salaries with transaction management."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int IncreaseSalary(int pDeptId, decimal pPercent)\n{\n try\n {\n var employeesToUpdate = context.Employees\n .Where(e => e.DepartmentId == pDeptId)\n .ToList();\n if (employeesToUpdate.Count == 0)\n {\n throw new Exception(\"No employees updated.\");\n }\n foreach (var emp in employeesToUpdate)\n {\n emp.Salary *= (1 + pPercent / 100m);\n }\n context.SaveChanges();\n return employeesToUpdate.Count;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION employee_count(p_dept_id IN employees.department_id%TYPE) RETURN NUMBER IS\n v_count NUMBER;\nBEGIN\n SELECT COUNT(*) INTO v_count FROM employees WHERE department_id = p_dept_id;\n RETURN v_count;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20005, 'An error occurred.');\nEND;\n```\n\nFunction to count employees in a department."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int EmployeeCount(int pDeptId)\n{\n try\n {\n return context.Employees.Count(e => e.DepartmentId == pDeptId);\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION get_employee_names(p_dept_id IN employees.department_id%TYPE) RETURN SYS_REFCURSOR IS\n cur SYS_REFCURSOR;\nBEGIN\n OPEN cur FOR SELECT first_name, last_name FROM employees WHERE department_id = p_dept_id;\n RETURN cur;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20006, 'An error occurred.');\nEND;\n```\n\nFunction to retrieve employee names."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic IEnumerable<EmployeeName> GetEmployeeNames(int pDeptId)\n{\n try\n {\n return context.Employees\n .Where(e => e.DepartmentId == pDeptId)\n .Select(e => new EmployeeName { FirstName = e.FirstName, LastName = e.LastName })\n .ToList();\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_bonus(p_emp_id IN employees.employee_id%TYPE) RETURN NUMBER IS\n v_salary employees.salary%TYPE;\nBEGIN\n SELECT salary INTO v_salary FROM employees WHERE employee_id = p_emp_id;\n IF v_salary > 5000 THEN\n RETURN v_salary * 0.1;\n ELSE\n RETURN v_salary * 0.05;\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20007, 'An error occurred.');\nEND;\n```\n\nFunction to calculate employee bonus with conditional logic."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal CalculateBonus(int pEmpId)\n{\n try\n {\n var employee = context.Employees.FirstOrDefault(e => e.EmployeeId == pEmpId);\n if (employee == null)\n {\n throw new Exception(\"Employee not found.\");\n }\n if (employee.Salary > 5000m)\n {\n return employee.Salary * 0.1m;\n }\n else\n {\n return employee.Salary * 0.05m;\n }\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION process_orders(p_order_id IN orders.order_id%TYPE) RETURN NUMBER IS\nBEGIN\n UPDATE order_items SET quantity = quantity + 10 WHERE order_id = p_order_id;\n COMMIT;\n RETURN SQL%ROWCOUNT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20008, 'An error occurred.');\nEND;\n```\n\nFunction to update order items with transaction management."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int ProcessOrders(int pOrderId)\n{\n try\n {\n var orderItems = context.OrderItems.Where(oi => oi.OrderId == pOrderId).ToList();\n foreach (var item in orderItems)\n {\n item.Quantity += 10;\n }\n context.SaveChanges();\n return orderItems.Count;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION check_stock(p_product_id IN products.product_id%TYPE) RETURN VARCHAR2 IS\n v_stock products.stock%TYPE;\nBEGIN\n SELECT stock INTO v_stock FROM products WHERE product_id = p_product_id;\n IF v_stock < 10 THEN\n RETURN 'Low Stock';\n ELSE\n RETURN 'Stock OK';\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20009, 'An error occurred.');\nEND;\n```\n\nFunction to check product stock levels."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string CheckStock(int pProductId)\n{\n try\n {\n var product = context.Products.FirstOrDefault(p => p.ProductId == pProductId);\n if (product == null)\n {\n throw new Exception(\"Product not found.\");\n }\n if (product.Stock < 10)\n {\n return \"Low Stock\";\n }\n else\n {\n return \"Stock OK\";\n }\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION generate_report(p_dept_id IN departments.department_id%TYPE) RETURN CLOB IS\n v_report CLOB;\nBEGIN\n SELECT LISTAGG(first_name || ' ' || last_name, ', ') WITHIN GROUP (ORDER BY last_name) INTO v_report FROM employees WHERE department_id = p_dept_id;\n RETURN v_report;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20010, 'An error occurred.');\nEND;\n```\n\nFunction to generate a report of employee names."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string GenerateReport(int pDeptId)\n{\n try\n {\n var report = string.Join(\", \", context.Employees\n .Where(e => e.DepartmentId == pDeptId)\n .OrderBy(e => e.LastName)\n .Select(e => e.FirstName + \" \" + e.LastName)\n .ToList());\n return report;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION validate_input(p_input IN VARCHAR2) RETURN BOOLEAN IS\nBEGIN\n IF p_input IS NULL THEN\n RAISE_APPLICATION_ERROR(-20011, 'Input cannot be null.');\n END IF;\n IF LENGTH(p_input) < 5 THEN\n RAISE_APPLICATION_ERROR(-20012, 'Input too short.');\n END IF;\n RETURN TRUE;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20013, 'An error occurred.');\nEND;\n```\n\nFunction to validate input parameters."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool ValidateInput(string pInput)\n{\n try\n {\n if (string.IsNullOrEmpty(pInput))\n {\n throw new Exception(\"Input cannot be null.\");\n }\n if (pInput.Length < 5)\n {\n throw new Exception(\"Input too short.\");\n }\n return true;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_total(p_order_id IN orders.order_id%TYPE) RETURN NUMBER IS\n v_total NUMBER;\nBEGIN\n SELECT SUM(quantity * unit_price) INTO v_total FROM order_items WHERE order_id = p_order_id;\n RETURN v_total;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20014, 'An error occurred.');\nEND;\n```\n\nFunction to calculate total order value."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal CalculateTotal(int pOrderId)\n{\n try\n {\n var total = context.OrderItems\n .Where(oi => oi.OrderId == pOrderId)\n .Sum(oi => oi.Quantity * oi.UnitPrice);\n return total ?? 0m;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION assign_tasks(p_employee_id IN employees.employee_id%TYPE) RETURN NUMBER IS\nBEGIN\n INSERT INTO tasks (employee_id, task_description) VALUES (p_employee_id, 'New Task');\n COMMIT;\n RETURN SQL%ROWCOUNT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20015, 'An error occurred.');\nEND;\n```\n\nFunction to assign tasks to an employee."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int AssignTasks(int pEmployeeId)\n{\n try\n {\n var newTask = new Task { EmployeeId = pEmployeeId, TaskDescription = \"New Task\" };\n context.Tasks.Add(newTask);\n context.SaveChanges();\n return 1;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION approve_request(p_request_id IN requests.request_id%TYPE) RETURN BOOLEAN IS\nBEGIN\n UPDATE requests SET status = 'Approved' WHERE request_id = p_request_id;\n IF SQL%ROWCOUNT = 0 THEN\n RAISE_APPLICATION_ERROR(-20016, 'Request not found.');\n END IF;\n COMMIT;\n RETURN TRUE;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20017, 'An error occurred.');\nEND;\n```\n\nFunction to approve a request."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool ApproveRequest(int pRequestId)\n{\n try\n {\n var request = context.Requests.FirstOrDefault(r => r.RequestId == pRequestId);\n if (request == null)\n {\n throw new Exception(\"Request not found.\");\n }\n request.Status = \"Approved\";\n context.SaveChanges();\n return true;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_age(p_dob IN employees.date_of_birth%TYPE) RETURN NUMBER IS\n v_age NUMBER;\nBEGIN\n SELECT FLOOR(MONTHS_BETWEEN(SYSDATE, p_dob)/12) INTO v_age FROM dual;\n RETURN v_age;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20018, 'An error occurred.');\nEND;\n```\n\nFunction to calculate employee age."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic int CalculateAge(DateTime pDob)\n{\n try\n {\n var age = DateTime.Today.Year - pDob.Year;\n if (pDob.AddYears(age) > DateTime.Today)\n {\n age--;\n }\n return age;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION generate_invoice(p_order_id IN orders.order_id%TYPE) RETURN CLOB IS\n v_invoice CLOB;\nBEGIN\n SELECT 'Invoice for Order ' || p_order_id || ' - Total: ' || TO_CHAR(calculate_total(p_order_id), '$999999.99') INTO v_invoice FROM dual;\n RETURN v_invoice;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20019, 'An error occurred.');\nEND;\n```\n\nFunction to generate an invoice."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string GenerateInvoice(int pOrderId)\n{\n try\n {\n var total = CalculateTotal(pOrderId);\n var invoice = \"Invoice for Order \" + pOrderId.ToString() + \" - Total: \" + total.ToString(\"C\");\n return invoice;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION check_credentials(p_username IN users.username%TYPE, p_password IN users.password%TYPE) RETURN BOOLEAN IS\nBEGIN\n IF EXISTS (SELECT 1 FROM users WHERE username = p_username AND password = p_password) THEN\n RETURN TRUE;\n ELSE\n RETURN FALSE;\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20020, 'An error occurred.');\nEND;\n```\n\nFunction to check user credentials."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool CheckCredentials(string pUsername, string pPassword)\n{\n try\n {\n return context.Users.Any(u => u.Username == pUsername && u.Password == pPassword);\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION update_status(p_order_id IN orders.order_id%TYPE, p_new_status IN orders.status%TYPE) RETURN BOOLEAN IS\nBEGIN\n UPDATE orders SET status = p_new_status WHERE order_id = p_order_id;\n IF SQL%ROWCOUNT = 0 THEN\n RAISE_APPLICATION_ERROR(-20021, 'Order not found.');\n END IF;\n COMMIT;\n RETURN TRUE;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n RAISE_APPLICATION_ERROR(-20022, 'An error occurred.');\nEND;\n```\n\nFunction to update order status."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool UpdateStatus(int pOrderId, string pNewStatus)\n{\n try\n {\n var order = context.Orders.FirstOrDefault(o => o.OrderId == pOrderId);\n if (order == null)\n {\n throw new Exception(\"Order not found.\");\n }\n order.Status = pNewStatus;\n context.SaveChanges();\n return true;\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_discount(p_amount IN NUMBER) RETURN NUMBER IS\nBEGIN\n IF p_amount > 1000 THEN\n RETURN p_amount * 0.1;\n ELSIF p_amount > 500 THEN\n RETURN p_amount * 0.05;\n ELSE\n RETURN 0;\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20023, 'An error occurred.');\nEND;\n```\n\nFunction to calculate discount based on amount."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal CalculateDiscount(decimal pAmount)\n{\n try\n {\n if (pAmount > 1000m)\n {\n return pAmount * 0.1m;\n }\n else if (pAmount > 500m)\n {\n return pAmount * 0.05m;\n }\n else\n {\n return 0m;\n }\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION get_product_details(p_product_id IN products.product_id%TYPE) RETURN SYS_REFCURSOR IS\n cur SYS_REFCURSOR;\nBEGIN\n OPEN cur FOR SELECT product_name, description, price FROM products WHERE product_id = p_product_id;\n RETURN cur;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20024, 'An error occurred.');\nEND;\n```\n\nFunction to retrieve product details."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic IEnumerable<ProductDetail> GetProductDetails(int pProductId)\n{\n try\n {\n return context.Products\n .Where(p => p.ProductId == pProductId)\n .Select(p => new ProductDetail { Name = p.ProductName, Description = p.Description, Price = p.Price })\n .ToList();\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION calculate_tax(p_amount IN NUMBER) RETURN NUMBER IS\nBEGIN\n RETURN p_amount * 0.08;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20025, 'An error occurred.');\nEND;\n```\n\nFunction to calculate tax on an amount."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal CalculateTax(decimal pAmount)\n{\n try\n {\n return pAmount * 0.08m;\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE FUNCTION validate_order(p_order_id IN orders.order_id%TYPE) RETURN BOOLEAN IS\nBEGIN\n IF EXISTS (SELECT 1 FROM orders WHERE order_id = p_order_id AND status = 'Pending') THEN\n RETURN TRUE;\n ELSE\n RETURN FALSE;\n END IF;\nEXCEPTION\n WHEN others THEN\n RAISE_APPLICATION_ERROR(-20026, 'An error occurred.');\nEND;\n```\n\nFunction to validate an order status."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic bool ValidateOrder(int pOrderId)\n{\n try\n {\n return context.Orders.Any(o => o.OrderId == pOrderId && o.Status == \"Pending\");\n }\n catch (Exception ex)\n {\n throw new Exception(\"An error occurred.\", ex);\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_select(p_table_name IN VARCHAR2, p_column_name IN VARCHAR2, p_value IN VARCHAR2) IS\n v_sql VARCHAR2(200);\n v_result VARCHAR2(200);\nBEGIN\n v_sql := 'SELECT ' || p_column_name || ' FROM ' || p_table_name || ' WHERE ' || p_column_name || ' = :1';\n EXECUTE IMMEDIATE v_sql INTO v_result USING p_value;\n DBMS_OUTPUT.PUT_LINE('Result: ' || v_result);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to select a value from a table based on dynamic column and table names."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string DynamicSelect(string pTableName, string pColumnName, string pValue)\n{\n try\n {\n var sql = $\"SELECT {pColumnName} FROM {pTableName} WHERE {pColumnName} = @pValue\";\n var result = context.Database.SqlQuery<string>(sql, new SqlParameter(\"@pValue\", pValue)).FirstOrDefault();\n Console.WriteLine($\"Result: {result}\");\n return result;\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_insert(p_table_name IN VARCHAR2, p_columns IN VARCHAR2, p_values IN VARCHAR2) IS\n v_sql VARCHAR2(200);\nBEGIN\n v_sql := 'INSERT INTO ' || p_table_name || ' (' || p_columns || ') VALUES (' || p_values || ')';\n EXECUTE IMMEDIATE v_sql;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to insert data into a table with dynamic column and value inputs."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void DynamicInsert(string pTableName, string pColumns, string pValues)\n{\n try\n {\n var sql = $\"INSERT INTO {pTableName} ({pColumns}) VALUES ({pValues})\";\n context.Database.ExecuteSqlCommand(sql);\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_update(p_table_name IN VARCHAR2, p_set_clause IN VARCHAR2, p_where_clause IN VARCHAR2) IS\n v_sql VARCHAR2(200);\nBEGIN\n v_sql := 'UPDATE ' || p_table_name || ' SET ' || p_set_clause || ' WHERE ' || p_where_clause;\n EXECUTE IMMEDIATE v_sql;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to update a table with dynamic SET and WHERE clauses."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void DynamicUpdate(string pTableName, string pSetClause, string pWhereClause)\n{\n try\n {\n var sql = $\"UPDATE {pTableName} SET {pSetClause} WHERE {pWhereClause}\";\n context.Database.ExecuteSqlCommand(sql);\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_delete(p_table_name IN VARCHAR2, p_where_clause IN VARCHAR2) IS\n v_sql VARCHAR2(200);\nBEGIN\n v_sql := 'DELETE FROM ' || p_table_name || ' WHERE ' || p_where_clause;\n EXECUTE IMMEDIATE v_sql;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to delete rows from a table with a dynamic WHERE clause."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void DynamicDelete(string pTableName, string pWhereClause)\n{\n try\n {\n var sql = $\"DELETE FROM {pTableName} WHERE {pWhereClause}\";\n context.Database.ExecuteSqlCommand(sql);\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_join(p_table1 IN VARCHAR2, p_table2 IN VARCHAR2, p_join_condition IN VARCHAR2) IS\n v_sql VARCHAR2(200);\n v_result VARCHAR2(200);\nBEGIN\n v_sql := 'SELECT t1.column1, t2.column2 FROM ' || p_table1 || ' t1 JOIN ' || p_table2 || ' t2 ON ' || p_join_condition;\n EXECUTE IMMEDIATE v_sql INTO v_result;\n DBMS_OUTPUT.PUT_LINE('Result: ' || v_result);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to perform a join between two tables with dynamic table names and join conditions."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string DynamicJoin(string pTable1, string pTable2, string pJoinCondition)\n{\n try\n {\n var sql = $\"SELECT t1.column1, t2.column2 FROM {pTable1} t1 JOIN {pTable2} t2 ON {pJoinCondition}\";\n var result = context.Database.SqlQuery<string>(sql).FirstOrDefault();\n Console.WriteLine($\"Result: {result}\");\n return result;\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_aggregate(p_table_name IN VARCHAR2, p_aggregate_function IN VARCHAR2, p_column_name IN VARCHAR2) IS\n v_sql VARCHAR2(200);\n v_result NUMBER;\nBEGIN\n v_sql := 'SELECT ' || p_aggregate_function || '(' || p_column_name || ') FROM ' || p_table_name;\n EXECUTE IMMEDIATE v_sql INTO v_result;\n DBMS_OUTPUT.PUT_LINE('Result: ' || v_result);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to perform an aggregate function on a dynamic table and column."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic decimal DynamicAggregate(string pTableName, string pAggregateFunction, string pColumnName)\n{\n try\n {\n var sql = $\"SELECT {pAggregateFunction}({pColumnName}) FROM {pTableName}\";\n var result = context.Database.SqlQuery<decimal>(sql).FirstOrDefault();\n Console.WriteLine($\"Result: {result}\");\n return result;\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_transaction(p_table_name IN VARCHAR2, p_column_name IN VARCHAR2, p_value IN VARCHAR2) IS\n v_sql VARCHAR2(200);\nBEGIN\n v_sql := 'UPDATE ' || p_table_name || ' SET ' || p_column_name || ' = :1';\n EXECUTE IMMEDIATE v_sql USING p_value;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to update a table within a transaction."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void DynamicTransaction(string pTableName, string pColumnName, string pValue)\n{\n try\n {\n var sql = $\"UPDATE {pTableName} SET {pColumnName} = @pValue\";\n context.Database.ExecuteSqlCommand(sql, new SqlParameter(\"@pValue\", pValue));\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_case(p_table_name IN VARCHAR2, p_column_name IN VARCHAR2, p_case_expression IN VARCHAR2) IS\n v_sql VARCHAR2(200);\n v_result VARCHAR2(200);\nBEGIN\n v_sql := 'SELECT CASE ' || p_case_expression || ' END FROM ' || p_table_name;\n EXECUTE IMMEDIATE v_sql INTO v_result;\n DBMS_OUTPUT.PUT_LINE('Result: ' || v_result);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to evaluate a CASE expression on a dynamic table and column."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string DynamicCase(string pTableName, string pColumnName, string pCaseExpression)\n{\n try\n {\n var sql = $\"SELECT CASE {pCaseExpression} END FROM {pTableName}\";\n var result = context.Database.SqlQuery<string>(sql).FirstOrDefault();\n Console.WriteLine($\"Result: {result}\");\n return result;\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_subquery(p_table_name IN VARCHAR2, p_subquery IN VARCHAR2) IS\n v_sql VARCHAR2(200);\n v_result VARCHAR2(200);\nBEGIN\n v_sql := 'SELECT * FROM ' || p_table_name || ' WHERE ' || p_column_name || ' IN (' || p_subquery || ')';\n EXECUTE IMMEDIATE v_sql INTO v_result;\n DBMS_OUTPUT.PUT_LINE('Result: ' || v_result);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to execute a subquery on a dynamic table."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string DynamicSubquery(string pTableName, string pSubquery)\n{\n try\n {\n var sql = $\"SELECT * FROM {pTableName} WHERE {pColumnName} IN ({pSubquery})\";\n var result = context.Database.SqlQuery<string>(sql).FirstOrDefault();\n Console.WriteLine($\"Result: {result}\");\n return result;\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE dynamic_union(p_table1 IN VARCHAR2, p_table2 IN VARCHAR2, p_columns IN VARCHAR2) IS\n v_sql VARCHAR2(200);\n v_result VARCHAR2(200);\nBEGIN\n v_sql := 'SELECT ' || p_columns || ' FROM ' || p_table1 || ' UNION SELECT ' || p_columns || ' FROM ' || p_table2;\n EXECUTE IMMEDIATE v_sql INTO v_result;\n DBMS_OUTPUT.PUT_LINE('Result: ' || v_result);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nDynamic SQL to perform a UNION operation on two dynamic tables."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string DynamicUnion(string pTable1, string pTable2, string pColumns)\n{\n try\n {\n var sql = $\"SELECT {pColumns} FROM {pTable1} UNION SELECT {pColumns} FROM {pTable2}\";\n var result = context.Database.SqlQuery<string>(sql).FirstOrDefault();\n Console.WriteLine($\"Result: {result}\");\n return result;\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE employee_type AS OBJECT (\n employee_id NUMBER,\n first_name VARCHAR2(50),\n last_name VARCHAR2(50),\n salary NUMBER\n);\n\nCREATE OR REPLACE PROCEDURE insert_employee(p_employee IN employee_type) IS\nBEGIN\n INSERT INTO employees VALUES (p_employee.employee_id, p_employee.first_name, p_employee.last_name, p_employee.salary);\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nInsert an employee using a PL/SQL object type and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class EmployeeType\n{\n public int EmployeeId { get; set; }\n public string FirstName { get; set; }\n public string LastName { get; set; }\n public decimal Salary { get; set; }\n}\n\npublic void InsertEmployee(EmployeeType pEmployee)\n{\n try\n {\n var newEmployee = new Employee\n {\n EmployeeId = pEmployee.EmployeeId,\n FirstName = pEmployee.FirstName,\n LastName = pEmployee.LastName,\n Salary = pEmployee.Salary\n };\n context.Employees.Add(newEmployee);\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE address_type AS OBJECT (\n street VARCHAR2(100),\n city VARCHAR2(50),\n state VARCHAR2(50),\n zip VARCHAR2(10)\n);\n\nCREATE OR REPLACE PROCEDURE update_address(p_employee_id IN NUMBER, p_address IN address_type) IS\nBEGIN\n UPDATE employees SET street = p_address.street, city = p_address.city, state = p_address.state, zip = p_address.zip WHERE employee_id = p_employee_id;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nUpdate employee address using a PL/SQL object type and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class AddressType\n{\n public string Street { get; set; }\n public string City { get; set; }\n public string State { get; set; }\n public string Zip { get; set; }\n}\n\npublic void UpdateAddress(int pEmployeeId, AddressType pAddress)\n{\n try\n {\n var employee = context.Employees.FirstOrDefault(e => e.EmployeeId == pEmployeeId);\n if (employee != null)\n {\n employee.Street = pAddress.Street;\n employee.City = pAddress.City;\n employee.State = pAddress.State;\n employee.Zip = pAddress.Zip;\n context.SaveChanges();\n }\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE phone_list AS TABLE OF VARCHAR2(15);\n\nCREATE OR REPLACE PROCEDURE insert_phones(p_employee_id IN NUMBER, p_phones IN phone_list) IS\nBEGIN\n FOR i IN 1..p_phones.COUNT LOOP\n INSERT INTO employee_phones (employee_id, phone_number) VALUES (p_employee_id, p_phones(i));\n END LOOP;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nInsert multiple phone numbers for an employee using a PL/SQL collection type."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void InsertPhones(int pEmployeeId, List<string> pPhones)\n{\n try\n {\n foreach (var phone in pPhones)\n {\n context.EmployeePhones.Add(new EmployeePhone { EmployeeId = pEmployeeId, PhoneNumber = phone });\n }\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE department_type AS OBJECT (\n department_id NUMBER,\n department_name VARCHAR2(100)\n);\n\nCREATE OR REPLACE PROCEDURE get_department(p_department_id IN NUMBER, p_department OUT department_type) IS\nBEGIN\n SELECT department_type(department_id, department_name) INTO p_department FROM departments WHERE department_id = p_department_id;\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nRetrieve a department using a PL/SQL object type and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class DepartmentType\n{\n public int DepartmentId { get; set; }\n public string DepartmentName { get; set; }\n}\n\npublic DepartmentType GetDepartment(int pDepartmentId)\n{\n try\n {\n var department = context.Departments\n .Where(d => d.DepartmentId == pDepartmentId)\n .Select(d => new DepartmentType { DepartmentId = d.DepartmentId, DepartmentName = d.DepartmentName })\n .FirstOrDefault();\n return department;\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE project_type AS OBJECT (\n project_id NUMBER,\n project_name VARCHAR2(100),\n start_date DATE,\n end_date DATE\n);\n\nCREATE OR REPLACE PROCEDURE update_project(p_project IN project_type) IS\nBEGIN\n UPDATE projects SET project_name = p_project.project_name, start_date = p_project.start_date, end_date = p_project.end_date WHERE project_id = p_project.project_id;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nUpdate a project using a PL/SQL object type and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class ProjectType\n{\n public int ProjectId { get; set; }\n public string ProjectName { get; set; }\n public DateTime StartDate { get; set; }\n public DateTime EndDate { get; set; }\n}\n\npublic void UpdateProject(ProjectType pProject)\n{\n try\n {\n var project = context.Projects.FirstOrDefault(p => p.ProjectId == pProject.ProjectId);\n if (project != null)\n {\n project.ProjectName = pProject.ProjectName;\n project.StartDate = pProject.StartDate;\n project.EndDate = pProject.EndDate;\n context.SaveChanges();\n }\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE employee_list AS TABLE OF employee_type;\n\nCREATE OR REPLACE PROCEDURE insert_employees(p_employees IN employee_list) IS\nBEGIN\n FOR i IN 1..p_employees.COUNT LOOP\n INSERT INTO employees VALUES (p_employees(i).employee_id, p_employees(i).first_name, p_employees(i).last_name, p_employees(i).salary);\n END LOOP;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nInsert multiple employees using a PL/SQL collection of object types."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void InsertEmployees(List<EmployeeType> pEmployees)\n{\n try\n {\n foreach (var emp in pEmployees)\n {\n context.Employees.Add(new Employee\n {\n EmployeeId = emp.EmployeeId,\n FirstName = emp.FirstName,\n LastName = emp.LastName,\n Salary = emp.Salary\n });\n }\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE product_type AS OBJECT (\n product_id NUMBER,\n product_name VARCHAR2(100),\n price NUMBER\n);\n\nCREATE OR REPLACE PROCEDURE get_product(p_product_id IN NUMBER, p_product OUT product_type) IS\nBEGIN\n SELECT product_type(product_id, product_name, price) INTO p_product FROM products WHERE product_id = p_product_id;\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nRetrieve a product using a PL/SQL object type and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class ProductType\n{\n public int ProductId { get; set; }\n public string ProductName { get; set; }\n public decimal Price { get; set; }\n}\n\npublic ProductType GetProduct(int pProductId)\n{\n try\n {\n var product = context.Products\n .Where(p => p.ProductId == pProductId)\n .Select(p => new ProductType { ProductId = p.ProductId, ProductName = p.ProductName, Price = p.Price })\n .FirstOrDefault();\n return product;\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE order_type AS OBJECT (\n order_id NUMBER,\n order_date DATE,\n total_amount NUMBER\n);\n\nCREATE OR REPLACE PROCEDURE create_order(p_order IN order_type) IS\nBEGIN\n INSERT INTO orders VALUES (p_order.order_id, p_order.order_date, p_order.total_amount);\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nCreate an order using a PL/SQL object type and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class OrderType\n{\n public int OrderId { get; set; }\n public DateTime OrderDate { get; set; }\n public decimal TotalAmount { get; set; }\n}\n\npublic void CreateOrder(OrderType pOrder)\n{\n try\n {\n var newOrder = new Order\n {\n OrderId = pOrder.OrderId,\n OrderDate = pOrder.OrderDate,\n TotalAmount = pOrder.TotalAmount\n };\n context.Orders.Add(newOrder);\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE customer_type AS OBJECT (\n customer_id NUMBER,\n customer_name VARCHAR2(100),\n email VARCHAR2(100)\n);\n\nCREATE OR REPLACE PROCEDURE update_customer(p_customer IN customer_type) IS\nBEGIN\n UPDATE customers SET customer_name = p_customer.customer_name, email = p_customer.email WHERE customer_id = p_customer.customer_id;\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nUpdate a customer using a PL/SQL object type and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class CustomerType\n{\n public int CustomerId { get; set; }\n public string CustomerName { get; set; }\n public string Email { get; set; }\n}\n\npublic void UpdateCustomer(CustomerType pCustomer)\n{\n try\n {\n var customer = context.Customers.FirstOrDefault(c => c.CustomerId == pCustomer.CustomerId);\n if (customer != null)\n {\n customer.CustomerName = pCustomer.CustomerName;\n customer.Email = pCustomer.Email;\n context.SaveChanges();\n }\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE TYPE invoice_type AS OBJECT (\n invoice_id NUMBER,\n invoice_date DATE,\n amount NUMBER\n);\n\nCREATE OR REPLACE PROCEDURE generate_invoice(p_invoice IN invoice_type) IS\nBEGIN\n INSERT INTO invoices VALUES (p_invoice.invoice_id, p_invoice.invoice_date, p_invoice.amount);\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nGenerate an invoice using a PL/SQL object type and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic class InvoiceType\n{\n public int InvoiceId { get; set; }\n public DateTime InvoiceDate { get; set; }\n public decimal Amount { get; set; }\n}\n\npublic void GenerateInvoice(InvoiceType pInvoice)\n{\n try\n {\n var newInvoice = new Invoice\n {\n InvoiceId = pInvoice.InvoiceId,\n InvoiceDate = pInvoice.InvoiceDate,\n Amount = pInvoice.Amount\n };\n context.Invoices.Add(newInvoice);\n context.SaveChanges();\n }\n catch (Exception ex)\n {\n context.Database.RollbackTransaction();\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE call_external_program(p_command IN VARCHAR2) IS\n v_result PLS_INTEGER;\nBEGIN\n v_result := DBMS_SCHEDULER.create_job(\n job_name => 'EXTERNAL_JOB',\n job_type => 'EXECUTABLE',\n job_action => p_command\n );\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nCall an external program using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void CallExternalProgram(string pCommand)\n{\n try\n {\n var process = new System.Diagnostics.Process();\n process.StartInfo.FileName = pCommand;\n process.Start();\n process.WaitForExit();\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE read_file(p_file_path IN VARCHAR2, p_content OUT CLOB) IS\n v_file UTL_FILE.file_type;\n v_line VARCHAR2(32767);\nBEGIN\n v_file := UTL_FILE.fopen('DIRECTORY_NAME', p_file_path, 'r');\n LOOP\n UTL_FILE.get_line(v_file, v_line);\n p_content := p_content || v_line || CHR(10);\n END LOOP;\n UTL_FILE.fclose(v_file);\nEXCEPTION\n WHEN NO_DATA_FOUND THEN\n UTL_FILE.fclose(v_file);\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nRead a file using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string ReadFile(string pFilePath)\n{\n try\n {\n return System.IO.File.ReadAllText(pFilePath);\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE write_file(p_file_path IN VARCHAR2, p_content IN CLOB) IS\n v_file UTL_FILE.file_type;\nBEGIN\n v_file := UTL_FILE.fopen('DIRECTORY_NAME', p_file_path, 'w');\n UTL_FILE.put_line(v_file, p_content);\n UTL_FILE.fclose(v_file);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nWrite to a file using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void WriteFile(string pFilePath, string pContent)\n{\n try\n {\n System.IO.File.WriteAllText(pFilePath, pContent);\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE call_web_service(p_url IN VARCHAR2, p_response OUT CLOB) IS\n v_http_request UTL_HTTP.req;\n v_http_response UTL_HTTP.resp;\nBEGIN\n v_http_request := UTL_HTTP.begin_request(p_url, 'GET');\n v_http_response := UTL_HTTP.get_response(v_http_request);\n UTL_HTTP.read_text(v_http_response, p_response);\n UTL_HTTP.end_response(v_http_response);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nCall a web service using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string CallWebService(string pUrl)\n{\n try\n {\n using (var client = new System.Net.Http.HttpClient())\n {\n var response = client.GetAsync(pUrl).Result;\n return response.Content.ReadAsStringAsync().Result;\n }\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE send_email(p_to IN VARCHAR2, p_subject IN VARCHAR2, p_body IN CLOB) IS\nBEGIN\n UTL_MAIL.send(sender => 'noreply@example.com', recipients => p_to, subject => p_subject, message => p_body);\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nSend an email using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void SendEmail(string pTo, string pSubject, string pBody)\n{\n try\n {\n var message = new System.Net.Mail.MailMessage(\"noreply@example.com\", pTo, pSubject, pBody);\n var client = new System.Net.Mail.SmtpClient(\"smtp.example.com\");\n client.Send(message);\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE execute_shell_command(p_command IN VARCHAR2) IS\n v_result PLS_INTEGER;\nBEGIN\n v_result := DBMS_SCHEDULER.create_job(\n job_name => 'SHELL_JOB',\n job_type => 'EXECUTABLE',\n job_action => '/bin/sh',\n number_of_arguments => 1,\n start_date => SYSTIMESTAMP,\n auto_drop => TRUE\n );\n DBMS_SCHEDULER.set_job_argument_value('SHELL_JOB', 1, p_command);\n DBMS_SCHEDULER.run_job('SHELL_JOB');\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nExecute a shell command using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void ExecuteShellCommand(string pCommand)\n{\n try\n {\n var process = new System.Diagnostics.Process();\n process.StartInfo.FileName = \"/bin/sh\";\n process.StartInfo.Arguments = pCommand;\n process.Start();\n process.WaitForExit();\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE call_java_method(p_class_name IN VARCHAR2, p_method_name IN VARCHAR2) IS\n LANGUAGE JAVA NAME 'ClassName.MethodName()';\nBEGIN\n NULL;\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nCall a Java method using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void CallJavaMethod(string pClassName, string pMethodName)\n{\n try\n {\n var type = Type.GetType(pClassName);\n var method = type.GetMethod(pMethodName);\n method.Invoke(null, null);\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE call_python_script(p_script_path IN VARCHAR2) IS\n v_result PLS_INTEGER;\nBEGIN\n v_result := DBMS_SCHEDULER.create_job(\n job_name => 'PYTHON_JOB',\n job_type => 'EXECUTABLE',\n job_action => 'python3',\n number_of_arguments => 1,\n start_date => SYSTIMESTAMP,\n auto_drop => TRUE\n );\n DBMS_SCHEDULER.set_job_argument_value('PYTHON_JOB', 1, p_script_path);\n DBMS_SCHEDULER.run_job('PYTHON_JOB');\n COMMIT;\nEXCEPTION\n WHEN others THEN\n ROLLBACK;\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nCall a Python script using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void CallPythonScript(string pScriptPath)\n{\n try\n {\n var process = new System.Diagnostics.Process();\n process.StartInfo.FileName = \"python3\";\n process.StartInfo.Arguments = pScriptPath;\n process.Start();\n process.WaitForExit();\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE call_external_dll(p_dll_name IN VARCHAR2, p_function_name IN VARCHAR2) IS\n LANGUAGE C LIBRARY external_lib NAME 'FunctionName';\nBEGIN\n NULL;\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nCall an external DLL function using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic void CallExternalDll(string pDllName, string pFunctionName)\n{\n try\n {\n var dll = System.Runtime.InteropServices.NativeLibrary.Load(pDllName);\n var function = System.Runtime.InteropServices.NativeLibrary.GetExport(dll, pFunctionName);\n var delegateType = typeof(Action);\n var method = System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(function, delegateType);\n method.DynamicInvoke();\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "Convert the following PL/SQL code to C# LINQ: \n\n```sql\nCREATE OR REPLACE PROCEDURE call_rest_api(p_url IN VARCHAR2, p_response OUT CLOB) IS\n v_http_request UTL_HTTP.req;\n v_http_response UTL_HTTP.resp;\nBEGIN\n v_http_request := UTL_HTTP.begin_request(p_url, 'GET');\n v_http_response := UTL_HTTP.get_response(v_http_request);\n UTL_HTTP.read_text(v_http_response, p_response);\n UTL_HTTP.end_response(v_http_response);\nEXCEPTION\n WHEN others THEN\n DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n```\n\nCall a REST API using PL/SQL and handle errors."
      },
      {
        "role": "assistant",
        "content": "Here's the equivalent C# LINQ code:\n\n```csharp\npublic string CallRestApi(string pUrl)\n{\n try\n {\n using (var client = new System.Net.Http.HttpClient())\n {\n var response = client.GetAsync(pUrl).Result;\n return response.Content.ReadAsStringAsync().Result;\n }\n }\n catch (Exception ex)\n {\n Console.WriteLine($\"Error: {ex.Message}\");\n throw;\n }\n}\n```"
      }
    ]
  }
]